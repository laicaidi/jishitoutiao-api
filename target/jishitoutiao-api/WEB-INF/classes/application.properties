#============ tomcat配置#====================================
#server.port=80

#debug=false
#trace=false
##########################################
##Spring JPA配置信息
# mysql数据库
spring.jpa.database = MYSQL
# 控制台显示SQL语句
spring.jpa.show-sql = true
# update：如果表不存在就创建，不一样就更新，一样就什么都不做。 (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.hbm2ddl.auto = update
# Naming strategy命名策略，加分隔线"_"
spring.jpa.hibernate.naming.physical-strategy = org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# 数据库方言
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
# 不加这句则默认为myisam引擎，加上就使用innodb引擎
spring.jpa.database-platform = org.hibernate.dialect.MySQL5InnoDBDialect
##########################################
###其他：
###spring.jpa.database-platform指定目标数据库的类型.
###spring.jpa.generate-ddl是否在启动时初始化schema，默认为false
###spring.jpa.hibernate.ddl-auto指定DDL mode (none, validate, update, create, create-drop). 当使用内嵌数据库时，默认是create-drop，否则为none.
###spring.jpa.hibernate.naming-strategy指定命名策略.
###spring.jpa.open-in-view是否注册OpenEntityManagerInViewInterceptor，绑定JPA EntityManager到请求线程中，默认为: true
###spring.jpa.properties添加额外的属性到JPA provider.

#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

##########################################
#druid datasouce database settings begin
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.driverClassName = com.mysql.jdbc.Driver
spring.datasource.druid.username = root
spring.datasource.druid.password = leitianxiang73_Xq
host = 127.0.0.1
#host = 192.168.31.183
autoReconnect = true
useUnicode = true
characterEncoding = utf-8
allowMultiQueries = true
spring.datasource.druid.url = jdbc:mysql://${host}:3306/jishitoutiao?allowMultiQueries=${allowMultiQueries}&autoReconnect=${autoReconnect}&useUnicode=${useUnicode}&characterEncoding=${characterEncoding}

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化连接池数量
spring.datasource.druid.initialSize = 5
# 最小连接池数量
spring.datasource.druid.minIdle = 5
# 最大连接池数量
spring.datasource.druid.maxActive = 30

# 获取连接时最大等待时间，单位毫秒。
# 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.druid.maxWait = 30000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
# 有两个含义：
#1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
spring.datasource.druid.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.minEvictableIdleTimeMillis = 300000

# 用来检测连接是否有效的sql，要求是一个查询语句。
# 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.druid.validationQuery = SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.testWhileIdle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.testOnBorrow = false
# 当数据库抛出一些不可恢复的异常时，抛弃连接
# spring.datasource.druid.exceptionSorter=true
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.testOnReturn = false

# 是否缓存preparedStatement，也就是PSCache。
# PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.poolPreparedStatements = true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
# 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
spring.datasource.druid.maxOpenPreparedStatements = 20

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙（防止SQL注入）
# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
# 监控统计用的filter:stat,防御sql注入的filter:wall,日志用的filter:log4j
spring.datasource.druid.filters = stat,wall
spring.datasource.druid.filter.stat.log-slow-sql = true
spring.datasource.druid.filter.stat.slow-sql-millis = 2000

# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connectionProperties = druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.useGlobalDataSourceStat = true

##########################################
###其他：
###spring.dao.exceptiontranslation.enabled是否开启PersistenceExceptionTranslationPostProcessor，默认为true
###spring.datasource.abandon-when-percentage-full设定超时被废弃的连接占到多少比例时要被关闭或上报
###spring.datasource.allow-pool-suspension使用Hikari pool时，是否允许连接池暂停，默认为: false
###spring.datasource.alternate-username-allowed是否允许替代的用户名.
###spring.datasource.auto-commit指定updates是否自动提交.
###spring.datasource.catalog指定默认的catalog.
###spring.datasource.commit-on-return设置当连接被归还时，是否要提交所有还未完成的事务
###spring.datasource.connection-init-sql指定连接被创建，再被添加到连接池之前执行的sql.
###spring.datasource.connection-init-sqls使用DBCP connection pool时，指定初始化时要执行的sql
###spring.datasource.connection-properties.[key]在使用DBCP connection pool时指定要配置的属性
###spring.datasource.connection-test-query指定校验连接合法性执行的sql语句
###spring.datasource.connection-timeout指定连接的超时时间，毫秒单位.
###spring.datasource.continue-on-error在初始化数据库时，遇到错误是否继续，默认false
###spring.datasource.data指定Data (DML)脚本
###spring.datasource.data-source-class-name指定数据源的全限定名.
###spring.datasource.data-source-jndi指定jndi的地址
###spring.datasource.data-source-properties.[key]使用Hikari connection pool时，指定要设置的属性
###spring.datasource.db-properties使用Tomcat connection pool，指定要设置的属性
###spring.datasource.default-auto-commit是否自动提交.
###spring.datasource.default-catalog指定连接默认的catalog.
###spring.datasource.default-read-only是否设置默认连接只读.
###spring.datasource.default-transaction-isolation指定连接的事务的默认隔离级别.
###spring.datasource.driver-class-name指定driver的类名，默认从jdbc url中自动探测.
###spring.datasource.fair-queue是否采用FIFO返回连接.
###spring.datasource.health-check-properties.[key]使用Hikari connection pool时，在心跳检查时传递的属性
###spring.datasource.idle-timeout指定连接多久没被使用时，被设置为空闲，默认为10ms
###spring.datasource.ignore-exception-on-pre-load当初始化连接池时，是否忽略异常.
###spring.datasource.init-sql当连接创建时，执行的sql
###spring.datasource.initialization-fail-fast当创建连接池时，没法创建指定最小连接数量是否抛异常
###spring.datasource.initialize指定初始化数据源，是否用data.sql来初始化，默认: true
###spring.datasource.isolate-internal-queries指定内部查询是否要被隔离，默认为false
###spring.datasource.jdbc-interceptors使用Tomcat connection pool时，指定jdbc拦截器，分号分隔
###spring.datasource.jdbc-url指定JDBC URL.
###spring.datasource.jmx-enabled是否开启JMX，默认为: false
###spring.datasource.jndi-name指定jndi的名称.
###spring.datasource.leak-detection-threshold使用Hikari connection pool时，多少毫秒检测一次连接泄露.
###spring.datasource.log-abandoned使用DBCP connection pool，是否追踪废弃statement或连接，默认为: false
###spring.datasource.log-validation-errors当使用Tomcat connection pool是否打印校验错误.
###spring.datasource.login-timeout指定连接数据库的超时时间.
###spring.datasource.max-age指定连接池中连接的最大年龄
###spring.datasource.max-lifetime指定连接池中连接的最大生存时间，毫秒单位.
###spring.datasource.max-open-prepared-statements指定最大的打开的prepared statements数量.
###spring.datasource.maximum-pool-size指定连接池最大的连接数，包括使用中的和空闲的连接.
###spring.datasource.min-evictable-idle-time-millis指定一个空闲连接最少空闲多久后可被清除.
###spring.datasource.minimum-idle指定连接维护的最小空闲连接数，当使用HikariCP时指定.
###spring.datasource.name指定数据源名.
###spring.datasource.num-tests-per-eviction-run指定运行每个idle object evictor线程时的对象数量
###spring.datasource.platform指定schema要使用的Platform(schema-${platform}.sql)，默认为: all
###spring.datasource.pool-name指定连接池名字.
###spring.datasource.pool-prepared-statements指定是否池化statements.
###spring.datasource.propagate-interrupt-state在等待连接时，如果线程被中断，是否传播中断状态.
###spring.datasource.read-only当使用Hikari connection pool时，是否标记数据源只读
###spring.datasource.register-mbeans指定Hikari connection pool是否注册JMX MBeans.
###spring.datasource.remove-abandoned指定当连接超过废弃超时时间时，是否立刻删除该连接.
###spring.datasource.remove-abandoned-timeout指定连接应该被废弃的时间.
###spring.datasource.rollback-on-return在归还连接时，是否回滚等待中的事务.
###spring.datasource.schema指定Schema (DDL)脚本.
###spring.datasource.separator指定初始化脚本的语句分隔符，默认: ;
###spring.datasource.sql-script-encoding指定SQL scripts编码.
###spring.datasource.suspect-timeout指定打印废弃连接前的超时时间.
###spring.datasource.test-on-connect创建时，是否测试连接
###spring.datasource.transaction-isolation指定事务隔离级别，使用Hikari connection pool时指定
###spring.datasource.use-disposable-connection-facade是否对连接进行包装，防止连接关闭之后被使用.
###spring.datasource.use-equals比较方法名时是否使用String.equals()替换==.
###spring.datasource.use-lock是否对连接操作加锁
###spring.datasource.validation-interval指定多少ms执行一次连接校验.
###spring.datasource.validation-query-timeout指定连接校验查询的超时时间.
###spring.datasource.validation-timeout设定连接校验的超时时间，当使用Hikari connection pool时指定
###spring.datasource.validator-class-name用来测试查询的validator全限定名.
###spring.datasource.xa.data-source-class-name指定数据源的全限定名.
###spring.datasource.xa.properties指定传递给XA data source的属性
##########################################

# 日志设置
logging.config = classpath:logback-boot.xml

# ehcache 多个用逗号分开
spring.cache.type = ehcache
spring.cache.cache-names = entityCache
spring.cache.ehcache.config = classpath:ehcache.xml

# 返回的json格式化
# 不输出null
spring.jackson.default-property-inclusion = non_null
# 格式化时间格式(并转成北京时间，以免时间相差8小时)
spring.jackson.date-format = yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone = GMT+8
# SnakeCaseStrategy: 蛇形策略，驼峰转下划线，单词小写，使用下划线'_'连接
spring.jackson.property-naming-strategy = com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy

# 指定mvc视图的后缀
spring.mvc.view.suffix = jsp

##########################################
##redis配置信息
# Matser的ip地址
redis.host = ${host}
# 端口号
redis.port = 6379
# 如果有密码
redis.password = leitianxiang27
# 默认连接的数据库编号
redis.dbIndex = 0
# 客户端超时时间单位是毫秒 默认是2000
redis.timeout = 10000

# 最小空闲数
redis.pool.minIdle = 10
# 最大空闲数
redis.pool.maxIdle = 20
# 连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal
# redis.maxActive=600
# 控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性
redis.pool.maxTotal = 200
# 是否启用后进先出, 默认true
redis.pool.lifo = true
# 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
redis.pool.maxWaitMillis = 3000
# 连接的最小空闲时间 默认1800000毫秒(30分钟)
redis.pool.minEvictableIdleTimeMillis = 1800000
# 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true
reids.pool.blockWhenExhausted = true
# 每次释放连接的最大数目,默认3
redis.pool.numTestsPerEvictionRun = 30
# 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
redis.pool.timeBetweenEvictionRunsMillis = 180000
# 是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
redis.pool.testOnBorrow = true
# 返回连接时检测有效性
redis.pool.testOnReturn = false
# 在空闲时检查有效性, 默认false
redis.pool.testWhileIdle = true

#redis集群配置
#spring.redis.cluster.nodes=192.168.177.128:7001,192.168.177.128:7002,192.168.177.128:7003,192.168.177.128:7004,192.168.177.128:7005,192.168.177.128:7006
#spring.redis.cluster.max-redirects=3

#哨兵模式
#redis.sentinel.host1=192.168.177.128
#redis.sentinel.port1=26379

#redis.sentinel.host2=172.20.1.231
#redis.sentinel.port2=26379

# JWT
jwt.header = Authentication
jwt.secret = FreeJiShiTouTiaoDom
# token三天内不过期
jwt.expiration = 259200
jwt.created = created
